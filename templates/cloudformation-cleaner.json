{
    "Description": "CloudFormation Cleaner Lambda Function",
    "Outputs": {
        "LambdaFunctionArn": {
            "Description": "Arn for the Lambda Function",
            "Value": {
                "Fn::GetAtt": [
                    "CloudformationCleanupFunction",
                    "Arn"
                ]
            }
        }
    },
    "Parameters": {
        "LambdaMemorySize": {
            "AllowedValues": [
                128,
                192,
                256,
                320,
                384,
                448,
                512,
                576,
                640,
                704,
                768,
                832,
                896,
                960,
                1024,
                1088,
                1152,
                1216,
                1280,
                1344,
                1408,
                1472,
                1536
            ],
            "Default": "128",
            "Description": "Amount of memory to allocate to the Lambda Function",
            "Type": "Number"
        },
        "LambdaTimeout": {
            "Default": "60",
            "Description": "Timeout in seconds for the Lambda function",
            "Type": "Number"
        }
    },
    "Resources": {
        "CloudformationCleanupFunction": {
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/usr/bin/python3\n",
                                "import boto3\n",
                                "import json\n",
                                "\n",
                                "def lambda_handler( event, context ):\n",
                                "  print(event['Records'][0]['Sns']['Message'])\n",
                                "  message_data = event['Records'][0]['Sns']['MessageAttributes']\n",
                                "  \n",
                                "  uptime = message_data['Uptime']['Value']\n",
                                "  stack_name = message_data['Stack']['Value']\n",
                                "\n",
                                "  client = boto3.client('cloudformation')\n",
                                "  stacks = client.list_stacks()\n",
                                "  \n",
                                "  for stack in stacks['StackSummaries']:\n",
                                "    if stack['StackName'] == stack_name and \"DELETE_COMPLETE\" not in stack['StackStatus']:\n",
                                "      client.delete_stack(\n",
                                "        StackName = stack_name\n",
                                "      )\n",
                                "      return \"Deleted Stack:\" + stack['StackName'] + \" ARN:\" + stack['StackId'] + \" Ran for:\" + uptime + \" hours\"\n",
                                "  return \"No Stack Deleted\"\n"
                            ]
                        ]
                    }
                },
                "Handler": "index.lambda_handler",
                "MemorySize": {
                    "Ref": "LambdaMemorySize"
                },
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Runtime": "python3.6",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "CloudFormation-Cleaner"
                    },
                    {
                        "Key": "POC",
                        "Value": "Grant Soyka"
                    },
                    {
                        "Key": "Project",
                        "Value": "overhead"
                    }
                ],
                "Timeout": {
                    "Ref": "LambdaTimeout"
                }
            },
            "Type": "AWS::Lambda::Function"
        },
        "LambdaExecutionRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "cloudformation:DeleteStack",
                                        "cloudformation:ListStacks",
                                        "cloudformation:DescribeStacks",
                                        "iam:DeleteRolePolicy",
                                        "iam:DeleteRole",
                                        "iam:DeleteInstanceProfile",
                                        "iam:RemoveRoleFromInstanceProfile",
                                        "ec2:DescribeInstances",
                                        "ec2:DeleteSecurityGroup",
                                        "ec2:TerminateInstances",
                                        "sns:DeleteTopic",
                                        "sns:GetTopicAttributes",
                                        "sns:ListSubscriptionsByTopic",
                                        "sns:Unsubscribe",
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents",
                                        "lambda:RemovePermission"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "CloudformationCleanerLambdaPolicy"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        }
    }
}